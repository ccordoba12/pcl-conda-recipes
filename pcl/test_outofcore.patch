--- test/outofcore/test_outofcore.cpp.old	Sat Aug 29 14:12:35 2015
+++ test/outofcore/test_outofcore.cpp	Sat Aug 29 16:08:56 2015
@@ -72,7 +72,7 @@
 
 // For doing exhaustive checks this is set low remove those, and this can be
 // set much higher
-const static uint64_t numPts (10000);
+const static boost::uint64_t numPts (10000);
 
 const static boost::uint32_t rngseed = 0xAAFF33DD;
 
@@ -491,7 +491,7 @@
 
   //(Case 4): Load existing tree from disk
   octree_disk octree_from_disk (filename_otreeB, true);
-  vector<uint64_t> numPoints = octree_from_disk.getNumPointsVector ();
+  vector<boost::uint64_t> numPoints = octree_from_disk.getNumPointsVector ();
   EXPECT_EQ (numPts , octree_from_disk.getNumPointsAtDepth (octree_from_disk.getDepth ())) << "Failure to count the number of points in a tree already existing on disk\n";
 }
 
@@ -752,7 +752,7 @@
   pcl::PointCloud<pcl::PointXYZ> point_cloud;
 
   point_cloud.points.reserve (numPts);
-  point_cloud.width = static_cast<uint32_t> (numPts);
+  point_cloud.width = static_cast<boost::uint32_t> (numPts);
   point_cloud.height = 1;
 
   for (size_t i=0; i < numPts; i++)
@@ -768,7 +768,7 @@
   octree_disk octreeB (1, min, max, filename_otreeB, "ECEF");
 
   //make sure the number of points successfully added are the same as how many we input
-  uint64_t points_in_input_cloud = input_cloud->width*input_cloud->height;
+  boost::uint64_t points_in_input_cloud = input_cloud->width*input_cloud->height;
   EXPECT_EQ (octreeA.addPointCloud (input_cloud, false), points_in_input_cloud) << "Insertion failure. Number of points successfully added does not match size of input cloud\n";
   EXPECT_EQ (octreeB.addPointCloud (input_cloud, false), points_in_input_cloud) << "Insertion failure. Number of points successfully added does not match size of input cloud\n";
 }
@@ -868,7 +868,7 @@
   octree_disk octreeA (depth, min, max, filename_otreeA, "ECEF");
   octree_disk octreeB (depth, min, max, filename_otreeB, "ECEF");
 
-  uint64_t points_added = octreeA.addPointCloud (dst_blob, false);
+  boost::uint64_t points_added = octreeA.addPointCloud (dst_blob, false);
   EXPECT_EQ (points_added, dst_blob->width*dst_blob->height);
   
   pcl::PCLPointCloud2::Ptr dst_blob2 (new pcl::PCLPointCloud2 ());
@@ -920,8 +920,8 @@
   octree_disk octreeA (depth, min, max, filename_otreeA, "ECEF");
   octree_disk octreeB (depth, min, max, filename_otreeB, "ECEF");
 
-  uint64_t points_added = octreeA.addPointCloud (dst_blob, false);
-  uint64_t LOD_points_added = octreeB.addPointCloud_and_genLOD (dst_blob);
+  boost::uint64_t points_added = octreeA.addPointCloud (dst_blob, false);
+  boost::uint64_t LOD_points_added = octreeB.addPointCloud_and_genLOD (dst_blob);
 
   ASSERT_EQ (points_added, dst_blob->width*dst_blob->height) << "Number of points returned by addPointCloud does not match the number of poitns in the input point cloud\n";
   ASSERT_EQ (LOD_points_added, dst_blob->width*dst_blob->height) << "Number of points returned by addPointCloud_and_genLOD does not match the number of points in the input point cloud\n";
@@ -933,7 +933,7 @@
   
   EXPECT_EQ (test_cloud->width*test_cloud->height, query_result_a->width*query_result_a->height) << "PCLPointCloud2 Query number of points returned failed\n";
 
-  uint64_t total_octreeB_LOD_query = 0;
+  boost::uint64_t total_octreeB_LOD_query = 0;
   
   for (boost::uint64_t i=0; i <= octreeB.getDepth (); i++)
   {
